scopeName: "source.monkey"
name: "Cerberus"
fileTypes: [
  "monkey",
  "cxs"
]
limitLineLength: false

# NAME                              COLOR
# comment.line.monkey               grey

# string.quoted.monkey              green

# constant.numeric.monkey           orange
# constant.language.boolean.monkey

# storage.type.class.monkey         purple
# storage.modifier.field.monkey

# variable.monkey                   red

# entity.name.type.monkey           yellow

# support.function.monkey           blue

patterns : [
  {
    comment: 'Basic comment character!'
    name: 'comment.line.monkey'
    begin: "'"
    end: "$"
  },
  {
    comment: 'Comment block'
    begin: "(?i)(?<=\\s|^|;)\\#rem\\b"
    end: "(?i)(?<=\\s|^|;)\\#end\\b"
    name: "comment.block.rem.monkey"
  },
  {
    comment: 'String data'
    name: "string.quoted.monkey"
    begin: "\""
    end: "\""
  },
  {
    comment: 'Integer data'
    name: "constant.numeric.monkey"
    match: "(?x)\\b(([0-9]+))"
  },
  {
    comment: 'Float data'
    match: '''
      (?x) (?<! \\$ ) (
        \\b ([0-9]+ \\. [0-9]+) |
        (\\. [0-9]+)
      )
    '''
    name: "constant.numeric.float.monkey"
  },
  {
    comment: 'Boolean data'
    match: "(?i)\\b(true|false)\\b"
    name: "constant.language.boolean.monkey"
  },
  {
    match: "(?i)\\b(if|not|then|elseif|else|return|for|next|select|case|wend|while|repeat|until|end|endif)\\b"
    name: "keyword.control.monkey"
  },
  {
    comment: 'Global declaration'
    captures:
      "1":
        name: "storage.modifier.global.monkey"
    match: "(?i)\\b(global)\\s+([a-zA-Z_]\\w*)\\b"
    name: "variable.monkey"
  },
  {
    comment: 'Local declaration'
    captures:
      "1":
        name: "storage.modifier.local.monkey"
    match: "(?i)\\b(local)\\s+([a-zA-Z_]\\w*)\\b"
    name: "variable.monkey"
  },
  {
    comment: 'Field declaration'
    captures:
      "1":
        name: "storage.modifier.field.monkey"
    match: "(?i)\\b(field)\\s+([a-zA-Z_]\\w*)+\\b"
    name: "variable.monkey"
  },
  {
    comment: 'Variable class declaration e.g. variable:Class'
    captures:
      "1":
        name: "keyword.operator.monkey"
    match: "(?i)\\b(:=?\\s?)+([a-zA-Z_]\\w*)\\b"
    name: "entity.name.type.monkey"
  },
  {
    comment: 'Class definition'
    match: "(?i)\\b(class)\\s+([a-zA-Z_]\\w*)(?:\\s+(extends)\\s+([a-zA-Z_]\\w*))?(?:\\s+(final|abstract))?"
    captures:
      "1":
        name: "storage.type.class.monkey"
      "2":
        name: "entity.name.type.monkey"
      "3":
        name: "storage.modifier.extends.monkey"
      "4":
        name: "entity.other.inherited-class.monkey"
      "5":
        name: "storage.modifier.class.monkey"
    name: "type.monkey"
  },
  {
    comment: 'Method definition'
    match: "(?i)\\b(method)\\s+([a-zA-Z_]\\w*)\\b"
    captures:
      "1":
        name: "storage.modifier.field.monkey"
      "2":
        name: "support.function.menthod.monkey"
    name: "method.monkey"
  },
  {
    comment: 'Function definition'
    match: "(?i)\\b(function)\\s+([a-zA-Z_]\\w*)\\b"
    captures:
      "1":
        name: "storage.modifier.field.monkey"
      "2":
        name: "support.function.monkey"
    name: "method.monkey"
  }
]

foldingStartMarker: '''
  (?xi)
      ^\\s*(
          (?<!end|end\\s)(function|class|interface|method|select|while|if) |
          \\#rem | for | repeat | '\\#region
      )\\b
'''
foldingStopMarker: '''
  (?xi)
      ^\\s*(
      # end <keyword>
          end\\s?(function|class|method|select|while) |
          \\#end|'\\#end\\s?region|end
      )\\b
'''
